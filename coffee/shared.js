// Generated by CoffeeScript 1.6.3
var Chart, ChildViewModel, Model, SocketIO, View, ViewModel, common,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

common = (function() {
  var constants, uuid;
  uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    var r, v;
    r = Math.random() * 16 | 0;
    v = c === 'x' ? r : r & 0x3 | 0x8;
    return v.toString(16);
  });
  constants = {
    en_US: {
      ADD_SPRINT: 'Add Sprint',
      ADD_STORY: 'Add Story',
      ADD_TASK: 'Add Task',
      CANCEL: 'Cancel',
      CLOSE: 'Close',
      COLOR: 'Color',
      CONFIRM: 'Confirm',
      CONFIRM_TASK_REMOVAL: function(summary) {
        return "Do you really want to remove the task with the summary '" + summary + "'?";
      },
      CONFIRM_SPRINT_REMOVAL: function(title) {
        return "Do you really want to remove the sprint with the title '" + title + "' and all its assigned stories and tasks?";
      },
      CONFIRM_STORY_REMOVAL: function(title) {
        return "Do you really want to remove the story with the title '" + title + "' and all its assigned tasks?";
      },
      END_DATE: 'End date',
      ESTIMATION: 'Estimation',
      ERROR_CREATE_TASK: 'Could not create a new Task.',
      ERROR_CREATE_SPRINT: function(reason) {
        return "Could not create a new Sprint (" + reason + ").";
      },
      ERROR_CREATE_STORY: function(reason) {
        return "Could not create a new the Story (" + reason + ").";
      },
      ERROR_REMOVE_STORY: 'Could not remove the Story.',
      ERROR_REMOVE_TASK: 'Could not remove the Task.',
      ERROR_UPDATE_TASK: 'Could not update the Task.',
      INITIAL_ESTIMATION: 'Initial estimation',
      OK: 'Ok',
      OPEN: 'Open',
      REMAINING_TIME: 'Remaining time',
      REMOVE: 'Remove',
      SHOW_STATS: 'Show Stats',
      SPRINT: 'Sprint',
      START_DATE: 'Start date',
      STORY: 'Story',
      TIME_SPENT: 'Time spent',
      TODAY: 'today',
      VALID_TIME_MESSAGE: 'This attribute has to be specified as a positive number < 100 with two or less precision digits (e.g. "1" or "99.25").'
    }
  };
  return {
    COLORS: ['yellow', 'orange', 'red', 'purple', 'blue', 'green'],
    uuid: uuid,
    constants: constants,
    MS_TO_DAYS_FACTOR: 86400000,
    KEYUP_UPDATE_DELAY: 1500,
    DATE_DISPLAY_FORMAT: 'MM/DD/YY',
    DATE_DB_FORMAT: 'YYYY-MM-DD'
  };
})();

SocketIO = (function() {
  function SocketIO(view, model) {
    var socket;
    this.view = view;
    this.model = model;
    socket = io.connect("http://" + window.location.hostname);
    socket.on('connect', function() {
      return socket.emit('register', {
        client_uuid: common.uuid
      });
    });
    socket.on('message', this.messageHandler);
  }

  SocketIO.prototype.messageHandler = function() {};

  return SocketIO;

})();

View = (function() {
  function View(ractiveTemplate, model) {
    this.model = model;
    this.get = __bind(this.get, this);
    this.set = __bind(this.set, this);
    this.update = __bind(this.update, this);
    this.setRactiveHandlers = __bind(this.setRactiveHandlers, this);
    this.ractive = new Ractive({
      el: 'output',
      template: ractiveTemplate,
      data: this._buildRactiveData(model)
    });
  }

  View.prototype._buildRactiveData = function() {};

  View.prototype.setRactiveHandlers = function(ractiveHandlers) {
    return this.ractive.on(ractiveHandlers);
  };

  View.prototype.update = function(keypath) {
    return this.ractive.update(keypath);
  };

  View.prototype.set = function(keypath, value) {
    return this.ractive.set(keypath, value);
  };

  View.prototype.get = function(keypath) {
    return this.ractive.get(keypath);
  };

  return View;

})();

Chart = (function() {
  function Chart(lines) {
    var format, height, line, padding, width, _i, _len,
      _this = this;
    if (lines == null) {
      lines = [];
    }
    this.refresh = __bind(this.refresh, this);
    this._calculateChartRange = __bind(this._calculateChartRange, this);
    format = d3.time.format("%Y-%m-%d");
    this.valueFn = function(d) {
      return d.value;
    };
    this.dateFn = function(d) {
      return format.parse(d.date);
    };
    padding = $('#stats-dialog .content').css('padding');
    width = $('#stats-dialog .content').width() - $('#stats-dialog .textbox').width();
    height = $('#stats-dialog').height() - $('#stats-dialog .popup-buttons').height() - 2 * parseInt(padding);
    this.xScale = d3.time.scale().range([30, width - 5]);
    this.yScale = d3.scale.linear().range([height - 20, 5]);
    this.yAxis = d3.svg.axis().scale(this.yScale).orient("left").ticks(5);
    this.xAxis = d3.svg.axis().scale(this.xScale).orient("bottom").tickFormat(d3.time.format('%e'));
    this.lineGn = d3.svg.line().x(function(d) {
      return _this.xScale(_this.dateFn(d));
    }).y(function(d) {
      return _this.yScale(_this.valueFn(d));
    });
    this.svg = d3.select("#chart").append("svg:svg").attr("width", width).attr("height", height);
    for (_i = 0, _len = lines.length; _i < _len; _i++) {
      line = lines[_i];
      this.svg.append("svg:path").attr('class', "" + line + " line");
    }
    this.svg.append("g").attr("class", "y axis").attr("transform", "translate(30, 0)");
    this.svg.append("g").attr("class", "x axis").attr("transform", "translate(0, " + (height - 20) + ")");
  }

  Chart.prototype._calculateChartRange = function(object) {
    var allData, key, value, xMax, xMin, yMax,
      _this = this;
    allData = (function() {
      var _results;
      _results = [];
      for (key in object) {
        value = object[key];
        _results.push(value);
      }
      return _results;
    })();
    yMax = allData.reduce(function(biggestMax, data) {
      var max;
      max = d3.max(data, _this.valueFn);
      if (max > biggestMax) {
        return max;
      } else {
        return biggestMax;
      }
    }, 0);
    xMin = allData.reduce(function(smallestMin, data) {
      var min;
      min = d3.min(data, _this.dateFn);
      if (smallestMin == null) {
        smallestMin = min;
      }
      if (min < smallestMin) {
        return min;
      } else {
        return smallestMin;
      }
    }, null);
    xMax = allData.reduce(function(biggestMax, data) {
      var max;
      max = d3.max(data, _this.dateFn);
      if (max > biggestMax) {
        return max;
      } else {
        return biggestMax;
      }
    }, 0);
    return [yMax, xMin, xMax];
  };

  Chart.prototype.refresh = function(object) {
    var data, path, xMax, xMin, yMax, _ref, _results,
      _this = this;
    _ref = this._calculateChartRange(object), yMax = _ref[0], xMin = _ref[1], xMax = _ref[2];
    this.xScale.domain([xMin, xMax]);
    this.yScale.domain([0, yMax]);
    _results = [];
    for (path in object) {
      data = object[path];
      _results.push((function() {
        var circles;
        circles = _this.svg.selectAll("circle." + path).data(data);
        circles.transition().attr("cx", function(d) {
          return _this.xScale(_this.dateFn(d));
        }).attr("cy", function(d) {
          return _this.yScale(_this.valueFn(d));
        });
        circles.enter().append("svg:circle").attr('class', "circle " + path).attr("r", 4).attr("cx", function(d) {
          return _this.xScale(_this.dateFn(d));
        }).attr("cy", function(d) {
          return _this.yScale(_this.valueFn(d));
        });
        _this.svg.select("path." + path).datum(data).transition().attr("d", _this.lineGn);
        _this.svg.selectAll('g.y.axis').call(_this.yAxis);
        return _this.svg.selectAll('g.x.axis').call(_this.xAxis);
      })());
    }
    return _results;
  };

  return Chart;

})();

Model = (function() {
  var create, get, getMultiple, remove;

  function Model() {
    this.set = __bind(this.set, this);
    this.get = __bind(this.get, this);
    this._update = __bind(this._update, this);
    this.update = __bind(this.update, this);
    this.updateChild = __bind(this.updateChild, this);
  }

  remove = curry(function(type, item, successCb, errorCb) {
    var getRev,
      _this = this;
    getRev = function() {
      return item._rev;
    };
    return $.ajaxq('client', {
      url: "/" + type + "/" + item._id,
      type: 'DELETE',
      headers: {
        client_uuid: common.uuid
      },
      beforeSend: function(jqXHR, settings) {
        return jqXHR.setRequestHeader('rev', getRev());
      },
      success: function(data, textStatus, jqXHR) {
        return typeof successCb === "function" ? successCb(data) : void 0;
      },
      error: function(data, textStatus, jqXHR) {
        var msgFunction;
        msgFunction = common.constants.en_US["ERROR_REMOVE_" + type];
        return typeof errorCb === "function" ? errorCb(msgFunction) : void 0;
      }
    });
  });

  create = curry(function(type, parentId, successCb, errorCb) {
    var headers;
    headers = {
      client_uuid: common.uuid
    };
    if (parentId != null) {
      headers.parent_id = parentId;
    }
    return $.ajaxq('client', {
      url: "/" + type,
      type: 'PUT',
      headers: headers,
      success: function(data, textStatus, jqXHR) {
        return typeof successCb === "function" ? successCb(data) : void 0;
      },
      error: function(data, textStatus, jqXHR) {
        var msgFunction;
        msgFunction = common.constants.en_US["ERROR_CREATE_" + type];
        return typeof errorCb === "function" ? errorCb(msgFunction) : void 0;
      }
    });
  });

  get = curry(function(type, id, successCb) {
    return $.ajaxq('client', {
      url: "/" + type + "/" + id,
      type: 'GET',
      dataType: 'json',
      success: function(data, textStatus, jqXHR) {
        return typeof successCb === "function" ? successCb(data) : void 0;
      },
      error: function(data, textStatus, jqXHR) {
        return console.log('error: #{data}');
      }
    });
  });

  getMultiple = curry(function(type, parentId, successCb) {
    var headers;
    if (parentId != null) {
      headers = {
        parent_id: parentId
      };
    } else {
      headers = {};
    }
    return $.ajaxq('client', {
      url: "/" + type,
      type: 'GET',
      headers: headers,
      dataType: 'json',
      success: function(data, textStatus, jqXHR) {
        return typeof successCb === "function" ? successCb(data) : void 0;
      },
      error: function(data, textStatus, jqXHR) {
        return console.log('error: #{data}');
      }
    });
  });

  Model.prototype.createTask = create('task');

  Model.prototype.createStory = create('story');

  Model.prototype.createSprint = create('sprint', null);

  Model.prototype.removeTask = remove('task');

  Model.prototype.removeStory = remove('story');

  Model.prototype.removeSprint = remove('sprint');

  Model.prototype.getTask = get('task');

  Model.prototype.getStory = get('story');

  Model.prototype.getSprint = get('sprint');

  Model.prototype.getTasks = getMultiple('task');

  Model.prototype.getStories = getMultiple('story');

  Model.prototype.getSprints = getMultiple('sprint', null);

  Model.prototype.updateChild = function(index, key, successCb, errorCb) {
    return this._update(this.children.objects[index], key, this.children.type, successCb, errorCb);
  };

  Model.prototype.update = function(key, successCb, errorCb) {
    return this._update(this[this.type], key, this.type, successCb, errorCb);
  };

  Model.prototype._update = function(object, key, type, successCb, errorCb) {
    var getRev;
    getRev = function() {
      return object._rev;
    };
    return $.ajaxq('client', {
      url: "/" + type + "/" + object._id,
      type: 'POST',
      headers: {
        client_uuid: common.uuid
      },
      contentType: 'application/json',
      data: JSON.stringify({
        key: key,
        value: object[key]
      }),
      beforeSend: function(jqXHR, settings) {
        return jqXHR.setRequestHeader('rev', getRev());
      },
      success: function(data, textStatus, jqXHR) {
        return typeof successCb === "function" ? successCb(data) : void 0;
      },
      error: function(data, textStatus, jqXHR) {
        return typeof errorCb === "function" ? errorCb("" + common.constants.en_US.ERROR_UPDATE_TASK + " " + jqXHR) : void 0;
      }
    });
  };

  Model.prototype._getClosestValueByDateIndex = function(object, index, startIndex) {
    var filteredKeys, sortedKeys;
    if (object[index] != null) {
      return object[index];
    } else {
      sortedKeys = Object.keys(object).sort();
      filteredKeys = sortedKeys.filter(function(key) {
        return (index > key && key >= startIndex);
      });
      if (filteredKeys.length > 0) {
        return object[filteredKeys.pop()];
      } else {
        return object.initial;
      }
    }
  };

  Model.prototype.get = function(key) {
    var _ref;
    return (_ref = this[this.type]) != null ? _ref[key] : void 0;
  };

  Model.prototype.set = function(key, value) {
    var _ref;
    return (_ref = this[this.type]) != null ? _ref[value] : void 0;
  };

  return Model;

})();

ViewModel = (function() {
  function ViewModel(view, model) {
    var ractiveHandlers;
    this.view = view;
    this.model = model;
    this.triggerUpdate = __bind(this.triggerUpdate, this);
    this.executePendingUpdate = __bind(this.executePendingUpdate, this);
    this._buildUpdateCall = __bind(this._buildUpdateCall, this);
    this.handleButton = __bind(this.handleButton, this);
    this.selectPopupItem = __bind(this.selectPopupItem, this);
    this.openSelectorPopup = __bind(this.openSelectorPopup, this);
    this.showError = __bind(this.showError, this);
    this.showConfirm = __bind(this.showConfirm, this);
    this._showModal = __bind(this._showModal, this);
    this._initPopupSelectors = __bind(this._initPopupSelectors, this);
    this._selectDate = __bind(this._selectDate, this);
    this._initDatePickers = __bind(this._initDatePickers, this);
    ractiveHandlers = {
      execute_pending_update: this.executePendingUpdate,
      set_before_value: this.setBeforeValue,
      trigger_update: this.triggerUpdate,
      tapped_selector: this.openSelectorPopup,
      tapped_selector_item: this.selectPopupItem,
      tapped_button: this.handleButton
    };
    this.view.setRactiveHandlers(ractiveHandlers);
  }

  ViewModel.prototype.setBeforeValue = function(ractiveEvent) {
    var node;
    node = ractiveEvent.node;
    return $(node).data('before_value');
  };

  ViewModel.prototype._initDatePickers = function(options) {
    var key, value, _results;
    $('.date-selector .content').datepicker({
      inline: true,
      showOtherMonths: true,
      dayNamesMin: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
      nextText: '<div class="arrow right"></div>',
      prevText: '<div class="arrow left"></div>',
      dateFormat: $.datepicker.ISO_8601,
      gotoCurrent: true,
      onSelect: this._selectDate
    });
    _results = [];
    for (key in options) {
      value = options[key];
      _results.push($('.date-selector .content').datepicker('option', key, value));
    }
    return _results;
  };

  ViewModel.prototype._selectDate = function(dateText, inst) {
    var dateSelector;
    dateSelector = $(inst.input).parents('.date-selector');
    this._hidePopup(dateSelector.attr('id'));
    $('.selected', dateSelector).data('date', dateText);
    return $('.selected', dateSelector).text(moment(dateText).format(common.DATE_DISPLAY_FORMAT));
  };

  ViewModel.prototype._initPopupSelectors = function() {
    var _this = this;
    $('.popup-selector a.open').click(function(event) {
      return event.preventDefault();
    });
    return $('.popup-selector').each(function(index, element) {
      return $('.selected', $(element)).click(function() {
        return $(document).one('keyup', function(event) {
          if (event.keyCode === 27) {
            return _this._hidePopup(element.id);
          }
        });
      });
    });
  };

  ViewModel.prototype._setConfirmedValue = function(node) {
    var key, value;
    key = node.id;
    value = this.model.get(key);
    return $(node).data('confirmed_value', value);
  };

  ViewModel.prototype._resetToConfirmedValue = function(node) {
    var key;
    key = node.id;
    return this.model.set(key, $(node).data('confirmed_value'));
  };

  ViewModel.prototype._isConfirmedValue = function(node) {
    var key, value;
    key = node.id;
    value = this.model.get(key);
    return value === $(node).data('confirmed_value');
  };

  ViewModel.prototype._showPopup = function(id) {
    var contentHeight, footerHeight, popupHeight, popupTop, _ref;
    contentHeight = $('#content').height();
    popupHeight = $("#" + id + " .content").height();
    footerHeight = $("#button-bar").height();
    $("#" + id + " .content").show();
    popupTop = (_ref = $("#" + id).position()) != null ? _ref.top : void 0;
    $('#overlay').css({
      height: $(window).height() + 'px'
    }).show();
    if ((popupTop + popupHeight) > (contentHeight + footerHeight)) {
      return $('#content').css('height', popupTop + popupHeight - footerHeight);
    }
  };

  ViewModel.prototype._hidePopup = function(id) {
    $("#" + id + " .content").hide();
    $('#overlay').hide();
    return $('#content').css('height', 'auto');
  };

  ViewModel.prototype._showModal = function(type, message) {
    if (message != null) {
      this.view.set("" + type + "_message", message);
    }
    $('#overlay').css({
      height: $(window).height() + 'px'
    }).show();
    return $("#" + type + "-dialog").css('visibility', 'visible');
  };

  ViewModel.prototype.showConfirm = function(message) {
    return this._showModal('confirm', message);
  };

  ViewModel.prototype.showError = function(message) {
    return this._showModal('error', message);
  };

  ViewModel.prototype._hideModal = function(type) {
    $("#" + type + "-dialog").css('visibility', 'hidden');
    return $("#overlay").hide();
  };

  ViewModel.prototype.hideConfirm = function() {
    return this._hideModal('confirm');
  };

  ViewModel.prototype.hideError = function() {
    return this._hideModal('error');
  };

  ViewModel.prototype.openSelectorPopup = function(ractiveEvent, id) {
    return this._showPopup(id);
  };

  ViewModel.prototype.selectPopupItem = function(ractiveEvent, args) {
    var id;
    id = args.selector_id;
    return this._hidePopup(id);
  };

  ViewModel.prototype.handleButton = function(ractiveEvent, action) {
    switch (action) {
      case 'error_ok':
        return this.hideError();
      case 'confirm_cancel':
        return this.hideConfirm();
      case 'confirm_confirm':
        return this.hideConfirm();
    }
  };

  ViewModel.prototype._buildUpdateCall = function(node) {
    var key, value,
      _this = this;
    key = node.id;
    value = this.model.get(key);
    return function() {
      var errorCb, successCb, undoValue;
      undoValue = _this.view.get("" + _this.model.type + "." + key);
      successCb = function(data) {
        _this.view.set("" + _this.model.type + "._rev", data.rev);
        if ($(node).data('confirmed_value') != null) {
          return _this._setConfirmedValue(node);
        }
      };
      errorCb = function() {
        return _this.view.set("" + _this.model.type + "." + key, undoValue);
      };
      if (!_this._isConfirmedValue(node)) {
        _this.view.set("" + _this.model.type + "." + key, value);
        return _this.model.update(key, successCb, errorCb);
      }
    };
  };

  ViewModel.prototype._abortCall = function(timer) {
    var call;
    clearTimeout(timer != null ? timer.id : void 0);
    call = timer != null ? timer.call : void 0;
    timer = null;
    return call;
  };

  ViewModel.prototype._delayCall = function(call) {
    var id;
    id = setTimeout(call, common.KEYUP_UPDATE_DELAY);
    return {
      id: id,
      call: call
    };
  };

  ViewModel.prototype.executePendingUpdate = function(ractiveEvent) {
    var call;
    call = this._abortCall(this.keyboardTimer);
    if (call != null) {
      return call();
    }
  };

  ViewModel.prototype.triggerUpdate = function(ractiveEvent) {
    var event, node, updateCall, value;
    event = ractiveEvent.original;
    node = ractiveEvent.node;
    value = $(node).val();
    if ($(node).data('before_value') !== value) {
      $(node).removeData('before_value');
      this._abortCall(this.keyboardTimer);
      if ((node.localName === 'input') && (event.which === 13)) {
        event.preventDefault();
      }
      updateCall = this._buildUpdateCall(node);
      if (((node.localName.match(/^input$|^textarea$/)) != null) && ($(node).data('validation') != null)) {
        if (!$(node).data('validation')(value)) {
          this._resetToConfirmedValue(node);
          updateCall = function() {
            return $(node).next().show();
          };
        } else {
          $(node).next().hide();
        }
      }
      return this.keyboardTimer = this._delayCall(updateCall);
    }
  };

  return ViewModel;

})();

ChildViewModel = (function(_super) {
  __extends(ChildViewModel, _super);

  function ChildViewModel(view, model) {
    var _this = this;
    this.view = view;
    this.model = model;
    this._buildUpdateCall = __bind(this._buildUpdateCall, this);
    this._handleSortstop = __bind(this._handleSortstop, this);
    this._calculatePriority = __bind(this._calculatePriority, this);
    ChildViewModel.__super__.constructor.call(this, this.view, this.model);
    $('ul#well').sortable({
      tolerance: 'pointer',
      delay: 150,
      cursor: 'move',
      containment: 'ul#well',
      handle: '.header'
    });
    $('ul#well').on('sortstart', function(event, ui) {
      var originalIndex;
      originalIndex = ui.item.index();
      return $('ul#well').one('sortstop', function(event, ui) {
        var index;
        console.log('sort stop');
        index = ui.item.index();
        if (index !== originalIndex) {
          return _this._handleSortstop(originalIndex, index);
        }
      });
    });
  }

  ChildViewModel.prototype._calculatePriority = function(originalIndex, index) {
    var last, nextPrio, object, objects, prevPrio;
    objects = this.model.children.objects.slice();
    object = objects[originalIndex];
    objects.splice(originalIndex, 1);
    objects.splice(index, 0, object);
    if (index === 0) {
      prevPrio = 0;
    } else {
      prevPrio = objects[index - 1].priority;
    }
    last = objects.length - 1;
    if (index === last) {
      return Math.ceil(objects[index - 1].priority + 1);
    } else {
      nextPrio = objects[index + 1].priority;
      return (nextPrio - prevPrio) / 2 + prevPrio;
    }
  };

  ChildViewModel.prototype._setConfirmedValue = function(node) {
    var childIndex, key, value, _ref, _ref1;
    _ref = this._buildKey(node), key = _ref[0], childIndex = _ref[1];
    if (childIndex != null) {
      value = (_ref1 = this.model.children.objects[childIndex]) != null ? _ref1[key] : void 0;
    } else {
      value = this.model.get(key);
    }
    return $(node).data('confirmed_value', value);
  };

  ChildViewModel.prototype._resetToConfirmedValue = function(node) {
    var childIndex, key, value, _ref, _ref1;
    _ref = this._buildKey(node), key = _ref[0], childIndex = _ref[1];
    if (childIndex != null) {
      return (_ref1 = this.model.children.objects[childIndex]) != null ? _ref1[key] = $(node).data('confirmed_value') : void 0;
    } else {
      return value = this.model.set(key, $(node).data('confirmed_value'));
    }
  };

  ChildViewModel.prototype._isConfirmedValue = function(node) {
    var childIndex, key, value, _ref, _ref1;
    _ref = this._buildKey(node), key = _ref[0], childIndex = _ref[1];
    if (childIndex != null) {
      value = (_ref1 = this.model.children.objects[childIndex]) != null ? _ref1[key] : void 0;
    } else {
      value = this.model.get(key);
    }
    return value === $(node).data('confirmed_value');
  };

  ChildViewModel.prototype._handleSortstop = function(originalIndex, index) {
    var priority, undoValue,
      _this = this;
    priority = this._calculatePriority(originalIndex, index);
    undoValue = this.model.children.objects[originalIndex].priority;
    this.model.children.objects[originalIndex].priority = priority;
    return this.model.updateChild(originalIndex, 'priority', function(data) {
      return _this.model.children.objects[originalIndex]._rev = data.rev;
    }, function(message) {
      var li;
      _this.model.children.objects[originalIndex].priority = undoValue;
      li = $("ul#well li:nth-child(" + (index + 1) + ")");
      li.detach();
      $("ul#well li:nth-child(" + originalIndex + ")").after(li);
      return _this.showError(message);
    });
  };

  ChildViewModel.prototype._buildKey = function(node) {
    var idParts;
    idParts = node.id.split('-');
    if (idParts.length > 1) {
      return [idParts[0], idParts[1]];
    } else {
      return [idParts[0], void 0];
    }
  };

  ChildViewModel.prototype._buildUpdateCall = function(node) {
    var childIndex, key, type, value, _ref, _ref1,
      _this = this;
    _ref = this._buildKey(node), key = _ref[0], childIndex = _ref[1];
    if (childIndex != null) {
      value = (_ref1 = this.model.children.objects[childIndex]) != null ? _ref1[key] : void 0;
      type = this.model.children.type;
    } else {
      type = this.model.type;
      value = this.model[type][key];
    }
    return function() {
      var errorCb, successCb;
      successCb = function(data) {
        var keypathPrefix;
        if (childIndex != null) {
          keypathPrefix = "children[" + childIndex + "]";
        } else {
          keypathPrefix = "" + type;
        }
        _this.view.set("" + keypathPrefix + "._rev", data.rev);
        _this.view.set("" + keypathPrefix + "." + key, data.value);
        if ($(node).data('confirmed_value') != null) {
          return _this._setConfirmedValue(node);
        }
      };
      errorCb = function() {
        var keypath;
        if (childIndex != null) {
          keypath = "children[" + childIndex + "]." + key;
        } else {
          keypath = "" + type + "." + key;
        }
        return _this.view.set(keypath, $(node).data('confirmed_value'));
      };
      if (!_this._isConfirmedValue(node)) {
        if (childIndex != null) {
          return _this.model.updateChild(childIndex, key, successCb, errorCb);
        } else {
          return _this.model.update(key, successCb, errorCb);
        }
      }
    };
  };

  /*_debug_printPrio: (objects = @model.children.objects) =>
  
    for task in objects
  
      console.log "#{task.summary}: #{task.priority}"
  _debug_setPrio: (x = 1) =>
    
    i = 0
    objects = @model.children.objects #.slice()
    objects.sort (a, b) -> a.summary > b.summary ? -1 : 1
    for task in objects
  
      task.priority = i + x
      @model.updateChild i++, 'priority'
    @_debug_printPrio objects
  _setChildPriority: (index, priority) =>
    
    @view.set "children.#{index}.priority", priority
    @view.get('children').sort @_sortByPriority
  _sortChildren: =>
  
    objects = @model.children.objects.slice()
    objects.sort @_sortByPriority
  
  _sortByPriority: (a, b) ->
  
      a.priority > b.priority ? -1 : 1
  */


  return ChildViewModel;

})(ViewModel);
